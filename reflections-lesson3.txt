Using a remote repository
When would you want to use a remote repository rather than keeping all your work local?

One reason might be when I know I would be using other systems to continue on my work rather than the present system. The remote
repository would keep track of all my commits, and would be clonable wherever and whatever system I am using. I would be able to
edit the files directly on the github website like now even.
One more reason would be if I think I would like to collaborate on the project with more people.
Git, for syncing with github, uses what is called a remote. This is short for remote repository. Before pushing a local repository
on to github, it needs to be in the form of a remote repository. 
  git remote
The above command shows all the remotes existing in the repository presently.
  git remote <remote_name> <github repo url>
This creates a new remote for the local repo and sets the url to which the repository will be pushed or pulled from
  git push remote_name branch_name
pushes branch_name to remote_name through the url which was specified earlier.
  git remote -v
gives out verbose message about remotes and their link urls.

Manual versus Automatic pull

Syncing automatically with the remote folder would sometimes make the project unusable, as there are some modifications being done
at the moment in the code. It would take some logical commit into the repository to make the project working again. In a manual pull,
another advantage is that only the branch(s) necessary can be pulled from the remote, or pushed through the remote. This quickens the
pace of the sync and also consumes less data.
Say you have created a repo and have linked it with one on github. Now you have started working on a feature on your local repo, all
the while, one of the collaborators is also working on the same repo remotely. If github autosyncs, some or all of the changes that
you have implemented or the collaborator's changes will be lost. While if you choose to manually sync at a later point, deciding that
you and your collaborator will both work on the same repo, but on different branches, and manually push commits, safety checks have 
been implemented. You may also want to control when to look for and merge changes on the shared repo, and not want it to push it down
on you without your control.
