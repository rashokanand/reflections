Using a remote repository
When would you want to use a remote repository rather than keeping all your work local?

One reason might be when I know I would be using other systems to continue on my work rather than the present system. The remote
repository would keep track of all my commits, and would be clonable wherever and whatever system I am using. I would be able to
edit the files directly on the github website like now even.
One more reason would be if I think I would like to collaborate on the project with more people.
Git, for syncing with github, uses what is called a remote. This is short for remote repository. Before pushing a local repository
on to github, it needs to be in the form of a remote repository. 
  git remote
The above command shows all the remotes existing in the repository presently.
  git remote <remote_name> <github repo url>
This creates a new remote for the local repo and sets the url to which the repository will be pushed or pulled from
  git push remote_name branch_name
pushes branch_name to remote_name through the url which was specified earlier.
  git remote -v
gives out verbose message about remotes and their link urls.

Manual versus Automatic pull

Syncing automatically with the remote folder would sometimes make the project unusable, as there are some modifications being done
at the moment in the code. It would take some logical commit into the repository to make the project working again. In a manual pull,
another advantage is that only the branch(s) necessary can be pulled from the remote, or pushed through the remote. This quickens the
pace of the sync and also consumes less data.
Say you have created a repo and have linked it with one on github. Now you have started working on a feature on your local repo, all
the while, one of the collaborators is also working on the same repo remotely. If github autosyncs, some or all of the changes that
you have implemented or the collaborator's changes will be lost. While if you choose to manually sync at a later point, deciding that
you and your collaborator will both work on the same repo, but on different branches, and manually push commits, safety checks have 
been implemented. You may also want to control when to look for and merge changes on the shared repo, and not want it to push it down
on you without your control.

Forks, Clones, and Branches

Clones are copies of a repository. Making a duplicate copy along with all the commits and branches of a git repository either from github
to a local folder, or making a duplicate from local to local, is called cloning. You are essentially making a clone of the repository.

Forks are clones of repositorys but only is said cloning is done on github. If there is a repository on github, that you want to make a 
copy of in your own account, you can fork it. It is github's way of cloning a repository from one account to another account on its
platform, without downloading to a local system.

Branches are offshoots of a repository that stay independent of the master, or any other existing branch. If you want to work on the
repo, on a new feature perhaps, but want a working version of the repo, say for others to use, you can create a new branch and work
all you like on this branch. The other branches stay unaffected by any change you implement in your branch. And hence a working version
of the code stays always available to end users.

Local copies of remote branches: Benefit of having last known state of remote locally

A feature of the git remote is that the last known 'commit' state of the remote repository is stored in the repo. Say you have added
a few commits to your local repo. Git status would then let you know that the branch you are working on is currently ahead of the remote
by a couple of commits. This feature allows you to keep track of what are the commits that are yet to be pushed to the remote according
to the last known state.
Another advantage is when you have introduced commits and parallely some other collaborator has added commits to the remote repo. Now
when a git fetch command is executed on the remote, the remote last known state is updated to include the commits by the collaborator.
The added commits, if conflicting with your added commits, git raises a merge conflict. This helps you to recheck all the raised
conflicts and finally merge the remote and the local branch. Again a 'git status' would tell you that the now local repo is ahead of the
remote by a few commits including the merge commit. Hence the need to push changes.
One thing to remember is that the 'Git pull' is two commands in one. A 'Git fetch' in conjunction with 'Git merge remote master' makes a
'git pull'.

How would you collaborate without using Git or Github? What would be easier and what would be harder?

Collaborating on Git or Github can be harder too. If I had to collaborate without github, one thing that would be easier is the
learning curve. Working with Git and Github takes some getting used to. And there are a lot of commands that need to be put to
memory. I would probably use Google drive or dropbox. It keeps track of all items in a folder. As soon as I know that there
has been some bug that was introduced, I can revert to the last version saved in the history log in google drive or dropbox.
All of these tasks are wildly easier in those both. No thinking is required, and the versioning systems do their work non intrusively.
The thing that gets harder is that when I want to search for an edit I made long in the past and I do not remember the exact date when.
I have to recheck each auto saved version till I find what I am looking for, due to the fact that no comments are saved for any
version. One more issue is that there would not be any proper control for collaborating. If someone else is also contributing to
the same project, and they have write priviliges, they can replace the files without the owner interfering. The owner can only 
revert back to a completely older version that contains none of the new changes, or keep all the changes. There is no middle ground.
